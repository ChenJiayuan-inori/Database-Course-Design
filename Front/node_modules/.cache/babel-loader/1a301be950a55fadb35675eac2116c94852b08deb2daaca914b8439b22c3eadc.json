{"ast":null,"code":"import Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport { jwtDecode } from \"jwt-decode\";\nVue.use(VueRouter);\nconst routes = [{\n  path: '/login',\n  name: 'mytest',\n  component: () => import( /* webpackChunkName: \"about\" */'../views/MyTest.vue')\n}, {\n  path: '/',\n  name: 'index',\n  redirect: '/login'\n}, {\n  path: '/backpage',\n  name: 'backpage',\n  component: () => import('../views/BackPage.vue')\n}, {\n  path: '/info',\n  name: 'info',\n  component: () => import('../components/Info.vue')\n}];\nconst router = new VueRouter({\n  routes\n});\n\n/*路由守卫   根据登录获得token*/\n\n// router.beforeEach((to,from,next) =>{\n\n//   const isLogin = localStorage.Token ? true :false;\n//   console.log(isLogin)\n\n//   if(to.path ===\"/login\" || to.path === \"/\"){\n//     next();\n//     return;\n//   }\n//   else{\n//     if(isLogin){\n//       try{\n//         const token = jwtDecode(localStorage.getItem('Token'));\n//         const expire = token.exp * 1000;\n//         const now = new Date().getTime();\n//         if (now > expire) {\n//           // 如果令牌已过期，则删除localStorage中的token并重新登录或提示用户重新登录\n//           localStorage.removeItem('Token');\n//           alert('您的登录已过期，请重新登录。');\n//           next('/login');\n//         } else {\n//           // 如果令牌未过期，则将token保存到localStorage中，并继续访问该路由\n//           localStorage.setItem('Token', token);\n//           next();\n//         } \n//       }\n//       catch (error) {\n//         console.log(error);\n//         next('/login');\n//       }\n//     }\n//     else{\n//       next();\n//     }\n// }});\n\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","jwtDecode","use","routes","path","name","component","redirect","router"],"sources":["C:/Users/83407/Desktop/vue/vue-project/src/router/index.js"],"sourcesContent":["import Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport { jwtDecode } from \"jwt-decode\"\n\n\nVue.use(VueRouter)\n\nconst routes = [\n  {\n    path: '/login',\n    name: 'mytest',\n    component: () => import(/* webpackChunkName: \"about\" */ '../views/MyTest.vue')\n  },\n  {\n    path: '/',\n    name: 'index',\n    redirect:'/login'\n  },\n  {\n    path: '/backpage',\n    name: 'backpage',\n    component: () => import('../views/BackPage.vue')\n  },\n  {\n    path: '/info',\n    name: 'info',\n    component: () => import('../components/Info.vue')\n  },\n]\n\n\nconst router = new VueRouter({\n  routes\n})\n\n/*路由守卫   根据登录获得token*/\n\n// router.beforeEach((to,from,next) =>{\n\n//   const isLogin = localStorage.Token ? true :false;\n//   console.log(isLogin)\n  \n\n\n//   if(to.path ===\"/login\" || to.path === \"/\"){\n//     next();\n//     return;\n//   }\n//   else{\n//     if(isLogin){\n//       try{\n//         const token = jwtDecode(localStorage.getItem('Token'));\n//         const expire = token.exp * 1000;\n//         const now = new Date().getTime();\n//         if (now > expire) {\n//           // 如果令牌已过期，则删除localStorage中的token并重新登录或提示用户重新登录\n//           localStorage.removeItem('Token');\n//           alert('您的登录已过期，请重新登录。');\n//           next('/login');\n//         } else {\n//           // 如果令牌未过期，则将token保存到localStorage中，并继续访问该路由\n//           localStorage.setItem('Token', token);\n//           next();\n//         } \n//       }\n//       catch (error) {\n//         console.log(error);\n//         next('/login');\n//       }\n//     }\n//     else{\n//       next();\n//     }\n// }});\n\n\nexport default router\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,SAAS,QAAQ,YAAY;AAGtCF,GAAG,CAACG,GAAG,CAACF,SAAS,CAAC;AAElB,MAAMG,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,SAAS,EAAEA,CAAA,KAAM,MAAM,EAAC,+BAAgC,qBAAqB;AAC/E,CAAC,EACD;EACEF,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,OAAO;EACbE,QAAQ,EAAC;AACX,CAAC,EACD;EACEH,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,UAAU;EAChBC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,uBAAuB;AACjD,CAAC,EACD;EACEF,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,wBAAwB;AAClD,CAAC,CACF;AAGD,MAAME,MAAM,GAAG,IAAIR,SAAS,CAAC;EAC3BG;AACF,CAAC,CAAC;;AAEF;;AAEA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,eAAeK,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}